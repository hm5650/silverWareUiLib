local UILib = {}
UILib.__index = UILib

-- Default theme colors
local DEFAULT_THEME = {
    Background = Color3.fromRGB(40, 40, 45),
    Header = Color3.fromRGB(50, 50, 55),
    Button = Color3.fromRGB(70, 70, 80),
    ButtonHover = Color3.fromRGB(90, 90, 100),
    ToggleOn = Color3.fromRGB(100, 200, 100),
    ToggleOff = Color3.fromRGB(200, 100, 100),
    Text = Color3.fromRGB(240, 240, 240),
    Accent = Color3.fromRGB(255, 150, 255),
    TextBox = Color3.fromRGB(60, 60, 65),
    ScrollBar = Color3.fromRGB(100, 100, 110),
    Dropdown = Color3.fromRGB(60, 60, 70),
    DropdownItem = Color3.fromRGB(80, 80, 90),
    DropdownItemHover = Color3.fromRGB(100, 100, 110),
    Slider = Color3.fromRGB(80, 80, 90),
    SliderBar = Color3.fromRGB(255, 150, 255)
}

function UILib.new(title, customTheme)
    local self = setmetatable({}, UILib)
    
    -- Apply custom theme or default
    self.Theme = customTheme or DEFAULT_THEME
    
    -- Create main GUI container
    self.gui = Instance.new("ScreenGui")
    self.gui.Name = "UILib"
    self.gui.ResetOnSpawn = false
    self.gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    self.gui.Parent = game:GetService("CoreGui")
    
    -- Main window frame
    self.frame = Instance.new("Frame")
    self.frame.Name = "MainWindow"
    self.frame.Size = UDim2.new(0, 200, 0, 30) -- Starts with just header height
    self.frame.Position = UDim2.new(0.5, -100, 0.3, 0)
    self.frame.BackgroundColor3 = self.Theme.Background
    self.frame.BackgroundTransparency = 0.1
    self.frame.BorderSizePixel = 0
    self.frame.Active = true
    self.frame.Draggable = true
    self.frame.ClipsDescendants = true
    self.frame.Parent = self.gui
    
    -- Window corner rounding
    local corner = Instance.new("UICorner", self.frame)
    corner.CornerRadius = UDim.new(0, 8)
    
    -- Header with title and controls
    local header = Instance.new("Frame", self.frame)
    header.Name = "Header"
    header.Size = UDim2.new(1, 0, 0, 30)
    header.Position = UDim2.new(0, 0, 0, 0)
    header.BackgroundColor3 = self.Theme.Header
    header.BorderSizePixel = 0
    
    local headerCorner = Instance.new("UICorner", header)
    headerCorner.CornerRadius = UDim.new(0, 8)
    
    -- Title label
    local titleLabel = Instance.new("TextLabel", header)
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, -60, 1, 0)
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.Text = title or "UI Library"
    titleLabel.TextColor3 = self.Theme.Accent
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.BackgroundTransparency = 1
    titleLabel.Font = Enum.Font.GothamSemibold
    titleLabel.TextSize = 14
    
    -- Minimize button
    self.minimizeBtn = Instance.new("TextButton", header)
    self.minimizeBtn.Name = "MinimizeButton"
    self.minimizeBtn.Size = UDim2.new(0, 20, 0, 20)
    self.minimizeBtn.Position = UDim2.new(1, -25, 0.5, -10)
    self.minimizeBtn.Text = "-"
    self.minimizeBtn.BackgroundColor3 = self.Theme.Button
    self.minimizeBtn.TextColor3 = self.Theme.Text
    self.minimizeBtn.Font = Enum.Font.GothamBold
    self.minimizeBtn.TextSize = 16
    Instance.new("UICorner", self.minimizeBtn).CornerRadius = UDim.new(0, 4)
    
    -- Close button
    local closeBtn = Instance.new("TextButton", header)
    closeBtn.Name = "CloseButton"
    closeBtn.Size = UDim2.new(0, 20, 0, 20)
    closeBtn.Position = UDim2.new(1, -50, 0.5, -10)
    closeBtn.Text = "X"
    closeBtn.BackgroundColor3 = Color3.fromRGB(200, 60, 60)
    closeBtn.TextColor3 = self.Theme.Text
    closeBtn.Font = Enum.Font.GothamBold
    closeBtn.TextSize = 14
    Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(0, 4)
    
    -- Content area
    self.scroll = Instance.new("ScrollingFrame", self.frame)
    self.scroll.Name = "Content"
    self.scroll.Size = UDim2.new(1, 0, 1, -30)
    self.scroll.Position = UDim2.new(0, 0, 0, 30)
    self.scroll.CanvasSize = UDim2.new(0, 0, 0, 0)
    self.scroll.ScrollBarThickness = 6
    self.scroll.ScrollBarImageColor3 = self.Theme.ScrollBar
    self.scroll.BackgroundTransparency = 1
    self.scroll.AutomaticCanvasSize = Enum.AutomaticSize.Y
    
    local list = Instance.new("UIListLayout", self.scroll)
    list.Name = "ListLayout"
    list.Padding = UDim.new(0, 8)
    list.SortOrder = Enum.SortOrder.LayoutOrder
    
    local padding = Instance.new("UIPadding", self.scroll)
    padding.PaddingLeft = UDim.new(0, 8)
    padding.PaddingRight = UDim.new(0, 8)
    padding.PaddingTop = UDim.new(0, 8)
    padding.PaddingBottom = UDim.new(0, 8)
    
    -- State variables
    self.minimized = false
    self.elements = {}
    self.tweenService = game:GetService("TweenService")
    
    -- Button hover effects
    local function setupButtonHover(button)
        local originalColor = button.BackgroundColor3
        
        button.MouseEnter:Connect(function()
            button.BackgroundColor3 = self.Theme.ButtonHover
        end)
        
        button.MouseLeave:Connect(function()
            button.BackgroundColor3 = originalColor
        end)
    end
    
    -- Set up button hovers
    setupButtonHover(self.minimizeBtn)
    setupButtonHover(closeBtn)
    
    -- Minimize button functionality
    self.minimizeBtn.MouseButton1Click:Connect(function()
        self:toggleMinimize()
    end)
    
    -- Close button functionality
    closeBtn.MouseButton1Click:Connect(function()
        self:destroy()
    end)
    
    return self
end

function UILib:toggleMinimize()
    self.minimized = not self.minimized
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    
    if self.minimized then
        -- Store current size before minimizing
        self.preMinimizeSize = self.frame.Size
        local tween = self.tweenService:Create(self.frame, tweenInfo, {Size = UDim2.new(0, 200, 0, 30)})
        tween:Play()
        self.minimizeBtn.Text = "+"
    else
        local targetSize = self.preMinimizeSize or UDim2.new(0, 200, 0, 300)
        local tween = self.tweenService:Create(self.frame, tweenInfo, {Size = targetSize})
        tween:Play()
        self.minimizeBtn.Text = "-"
    end
end

function UILib:addSection(name)
    local section = {}
    
    local container = Instance.new("Frame", self.scroll)
    container.Name = "Section_" .. name
    container.Size = UDim2.new(1, -16, 0, 0)
    container.AutomaticSize = Enum.AutomaticSize.Y
    container.BackgroundTransparency = 1
    
    local layout = Instance.new("UIListLayout", container)
    layout.Padding = UDim.new(0, 6)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    
    local padding = Instance.new("UIPadding", container)
    padding.PaddingLeft = UDim.new(0, 8)
    padding.PaddingRight = UDim.new(0, 8)
    
    -- Section label
    local label = Instance.new("TextLabel", container)
    label.Name = "Label"
    label.Size = UDim2.new(1, 0, 0, 20)
    label.Text = name
    label.TextColor3 = self.Theme.Accent
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.GothamSemibold
    label.TextSize = 14
    
    -- Section divider
    local divider = Instance.new("Frame", container)
    divider.Name = "Divider"
    divider.Size = UDim2.new(1, 0, 0, 1)
    divider.BackgroundColor3 = self.Theme.Accent
    divider.BackgroundTransparency = 0.7
    divider.BorderSizePixel = 0
    
    -- Add elements to section
    function section:addButton(name, callback)
        return self:_addElement(UILib.addButton, name, callback)
    end
    
    function section:addToggle(name, callback)
        return self:_addElement(UILib.addToggle, name, callback)
    end
    
    function section:addTextbox(placeholder, callback)
        return self:_addElement(UILib.addTextbox, placeholder, callback)
    end
    
    function section:addSlider(name, min, max, defaultValue, callback)
        return self:_addElement(UILib.addSlider, name, min, max, defaultValue, callback)
    end
    
    function section:addDropdown(name, options, defaultOption, callback)
        return self:_addElement(UILib.addDropdown, name, options, defaultOption, callback)
    end
    
    function section:addLabel(text)
        return self:_addElement(UILib.addLabel, text)
    end
    
    function section:_addElement(func, ...)
        return func(self.parent, ...)
    end
    
    section.parent = self
    section.container = container
    table.insert(self.elements, section)
    
    return section
end

function UILib:addButton(name, callback)
    local btn = Instance.new("TextButton", self.scroll)
    btn.Name = "Button_" .. name
    btn.Size = UDim2.new(1, -16, 0, 30)
    btn.Text = name
    btn.BackgroundColor3 = self.Theme.Button
    btn.TextColor3 = self.Theme.Text
    btn.Font = Enum.Font.Gotham
    btn.TextSize = 14
    
    local corner = Instance.new("UICorner", btn)
    corner.CornerRadius = UDim.new(0, 6)
    
    -- Button hover effect
    local originalColor = btn.BackgroundColor3
    
    btn.MouseEnter:Connect(function()
        btn.BackgroundColor3 = self.Theme.ButtonHover
    end)
    
    btn.MouseLeave:Connect(function()
        btn.BackgroundColor3 = originalColor
    end)
    
    btn.MouseButton1Click:Connect(function()
        callback()
    end)
    
    table.insert(self.elements, btn)
    return btn
end

function UILib:addToggle(name, callback)
    local toggled = false
    local btn = Instance.new("TextButton", self.scroll)
    btn.Name = "Toggle_" .. name
    btn.Size = UDim2.new(1, -16, 0, 30)
    btn.Text = "  " .. name
    btn.TextXAlignment = Enum.TextXAlignment.Left
    btn.BackgroundColor3 = self.Theme.ToggleOff
    btn.TextColor3 = self.Theme.Text
    btn.Font = Enum.Font.Gotham
    btn.TextSize = 14
    
    local corner = Instance.new("UICorner", btn)
    corner.CornerRadius = UDim.new(0, 6)
    
    -- Toggle indicator
    local indicator = Instance.new("Frame", btn)
    indicator.Name = "Indicator"
    indicator.Size = UDim2.new(0, 20, 0, 20)
    indicator.Position = UDim2.new(1, -25, 0.5, -10)
    indicator.BackgroundColor3 = Color3.fromRGB(240, 240, 240)
    indicator.BorderSizePixel = 0
    Instance.new("UICorner", indicator).CornerRadius = UDim.new(0, 4)
    
    -- Button hover effect
    local originalColor = btn.BackgroundColor3
    
    btn.MouseEnter:Connect(function()
        btn.BackgroundColor3 = toggled and Color3.fromRGB(
            math.floor(self.Theme.ToggleOn.R * 255 * 1.1),
            math.floor(self.Theme.ToggleOn.G * 255 * 1.1),
            math.floor(self.Theme.ToggleOn.B * 255 * 1.1)
        ) or Color3.fromRGB(
            math.floor(self.Theme.ToggleOff.R * 255 * 1.1),
            math.floor(self.Theme.ToggleOff.G * 255 * 1.1),
            math.floor(self.Theme.ToggleOff.B * 255 * 1.1)
        )
    end)
    
    btn.MouseLeave:Connect(function()
        btn.BackgroundColor3 = originalColor
    end)
    
    local function updateToggle()
        if toggled then
            btn.BackgroundColor3 = self.Theme.ToggleOn
            indicator.Position = UDim2.new(1, -25, 0.5, -10)
        else
            btn.BackgroundColor3 = self.Theme.ToggleOff
            indicator.Position = UDim2.new(1, -45, 0.5, -10)
        end
        
        -- Animate the indicator
        local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local tween = self.tweenService:Create(indicator, tweenInfo, {
            Position = toggled and UDim2.new(1, -25, 0.5, -10) or UDim2.new(1, -45, 0.5, -10)
        })
        tween:Play()
    end
    
    btn.MouseButton1Click:Connect(function()
        toggled = not toggled
        updateToggle()
        callback(toggled)
    end)
    
    -- Initialize
    updateToggle()
    
    table.insert(self.elements, btn)
    return btn
end

function UILib:addTextbox(placeholder, callback)
    local container = Instance.new("Frame", self.scroll)
    container.Name = "Textbox_" .. placeholder
    container.Size = UDim2.new(1, -16, 0, 30)
    container.BackgroundTransparency = 1
    
    local box = Instance.new("TextBox", container)
    box.Name = "Input"
    box.Size = UDim2.new(1, 0, 1, 0)
    box.PlaceholderText = placeholder
    box.Text = ""
    box.BackgroundColor3 = self.Theme.TextBox
    box.TextColor3 = self.Theme.Text
    box.Font = Enum.Font.Gotham
    box.TextSize = 14
    box.ClearTextOnFocus = false
    
    local corner = Instance.new("UICorner", box)
    corner.CornerRadius = UDim.new(0, 6)
    
    local padding = Instance.new("UIPadding", box)
    padding.PaddingLeft = UDim.new(0, 8)
    padding.PaddingRight = UDim.new(0, 8)
    
    box.Focused:Connect(function()
        box.BackgroundColor3 = self.Theme.ButtonHover
    end)
    
    box.FocusLost:Connect(function(enterPressed)
        box.BackgroundColor3 = self.Theme.TextBox
        if enterPressed then
            callback(box.Text)
        end
    end)
    
    table.insert(self.elements, container)
    return box
end

function UILib:addSlider(name, min, max, defaultValue, callback)
    local container = Instance.new("Frame", self.scroll)
    container.Name = "Slider_" .. name
    container.Size = UDim2.new(1, -16, 0, 60)
    container.BackgroundTransparency = 1
    
    local label = Instance.new("TextLabel", container)
    label.Name = "Label"
    label.Size = UDim2.new(1, 0, 0, 20)
    label.Text = name .. ": " .. defaultValue
    label.TextColor3 = self.Theme.Text
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.Gotham
    label.TextSize = 14
    
    local slider = Instance.new("Frame", container)
    slider.Name = "SliderTrack"
    slider.Size = UDim2.new(1, 0, 0, 6)
    slider.Position = UDim2.new(0, 0, 0, 30)
    slider.BackgroundColor3 = self.Theme.Slider
    slider.BorderSizePixel = 0
    Instance.new("UICorner", slider).CornerRadius = UDim.new(1, 0)
    
    local bar = Instance.new("Frame", slider)
    bar.Name = "SliderBar"
    bar.Size = UDim2.new(0, 0, 1, 0)
    bar.BackgroundColor3 = self.Theme.SliderBar
    bar.BorderSizePixel = 0
    Instance.new("UICorner", bar).CornerRadius = UDim.new(1, 0)
    
    local button = Instance.new("TextButton", slider)
    button.Name = "SliderButton"
    button.Size = UDim2.new(0, 16, 0, 16)
    button.Position = UDim2.new(0, -8, 0.5, -8)
    button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    button.Text = ""
    button.BorderSizePixel = 0
    Instance.new("UICorner", button).CornerRadius = UDim.new(1, 0)
    
    local value = math.clamp(defaultValue or min, min, max)
    local isSliding = false
    
    local function updateSlider()
        local ratio = (value - min) / (max - min)
        bar.Size = UDim2.new(ratio, 0, 1, 0)
        button.Position = UDim2.new(ratio, -8, 0.5, -8)
        label.Text = name .. ": " .. string.format("%.2f", value)
    end
    
    button.MouseButton1Down:Connect(function()
        isSliding = true
    end)
    
    game:GetService("UserInputService").InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isSliding = false
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if isSliding and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mouse = game:GetService("Players").LocalPlayer:GetMouse()
            local x = mouse.X - slider.AbsolutePosition.X
            local ratio = math.clamp(x / slider.AbsoluteSize.X, 0, 1)
            value = min + (max - min) * ratio
            updateSlider()
            callback(value)
        end
    end)
    
    -- Initialize
    updateSlider()
    
    table.insert(self.elements, container)
    return {
        SetValue = function(newValue)
            value = math.clamp(newValue, min, max)
            updateSlider()
            callback(value)
        end,
        GetValue = function() return value end
    }
end

function UILib:addDropdown(name, options, defaultOption, callback)
    local container = Instance.new("Frame", self.scroll)
    container.Name = "Dropdown_" .. name
    container.Size = UDim2.new(1, -16, 0, 30)
    container.BackgroundTransparency = 1
    
    local isOpen = false
    local selected = defaultOption or options[1]
    
    local mainButton = Instance.new("TextButton", container)
    mainButton.Name = "MainButton"
    mainButton.Size = UDim2.new(1, 0, 0, 30)
    mainButton.Text = name .. ": " .. selected
    mainButton.TextXAlignment = Enum.TextXAlignment.Left
    mainButton.BackgroundColor3 = self.Theme.Dropdown
    mainButton.TextColor3 = self.Theme.Text
    mainButton.Font = Enum.Font.Gotham
    mainButton.TextSize = 14
    
    local padding = Instance.new("UIPadding", mainButton)
    padding.PaddingLeft = UDim.new(0, 8)
    padding.PaddingRight = UDim.new(0, 8)
    
    local corner = Instance.new("UICorner", mainButton)
    corner.CornerRadius = UDim.new(0, 6)
    
    local arrow = Instance.new("TextLabel", mainButton)
    arrow.Name = "Arrow"
    arrow.Size = UDim2.new(0, 20, 0, 20)
    arrow.Position = UDim2.new(1, -25, 0.5, -10)
    arrow.Text = "▼"
    arrow.TextColor3 = self.Theme.Text
    arrow.BackgroundTransparency = 1
    arrow.Font = Enum.Font.GothamBold
    arrow.TextSize = 14
    
    local optionsFrame = Instance.new("Frame", container)
    optionsFrame.Name = "Options"
    optionsFrame.Size = UDim2.new(1, 0, 0, 0)
    optionsFrame.Position = UDim2.new(0, 0, 0, 35)
    optionsFrame.BackgroundColor3 = self.Theme.Dropdown
    optionsFrame.ClipsDescendants = true
    optionsFrame.Visible = false
    
    local optionsCorner = Instance.new("UICorner", optionsFrame)
    optionsCorner.CornerRadius = UDim.new(0, 6)
    
    local optionsList = Instance.new("UIListLayout", optionsFrame)
    optionsList.Padding = UDim.new(0, 2)
    
    local optionsPadding = Instance.new("UIPadding", optionsFrame)
    optionsPadding.PaddingTop = UDim.new(0, 4)
    optionsPadding.PaddingBottom = UDim.new(0, 4)
    
    -- Create option buttons
    local optionButtons = {}
    for i, option in ipairs(options) do
        local button = Instance.new("TextButton", optionsFrame)
        button.Name = "Option_" .. option
        button.Size = UDim2.new(1, -8, 0, 25)
        button.Position = UDim2.new(0, 4, 0, (i-1)*27)
        button.Text = option
        button.TextXAlignment = Enum.TextXAlignment.Left
        button.BackgroundColor3 = self.Theme.DropdownItem
        button.TextColor3 = self.Theme.Text
        button.Font = Enum.Font.Gotham
        button.TextSize = 14
        
        local buttonCorner = Instance.new("UICorner", button)
        buttonCorner.CornerRadius = UDim.new(0, 4)
        
        local buttonPadding = Instance.new("UIPadding", button)
        buttonPadding.PaddingLeft = UDim.new(0, 8)
        
        -- Hover effect
        button.MouseEnter:Connect(function()
            button.BackgroundColor3 = self.Theme.DropdownItemHover
        end)
        
        button.MouseLeave:Connect(function()
            button.BackgroundColor3 = self.Theme.DropdownItem
        end)
        
        button.MouseButton1Click:Connect(function()
            selected = option
            mainButton.Text = name .. ": " .. selected
            toggleDropdown()
            callback(selected)
        end)
        
        table.insert(optionButtons, button)
    end
    
    local function toggleDropdown()
        isOpen = not isOpen
        arrow.Text = isOpen and "▲" or "▼"
        optionsFrame.Visible = isOpen
        
        if isOpen then
            optionsFrame.Size = UDim2.new(1, 0, 0, #options * 27 + 8)
            container.Size = UDim2.new(1, -16, 0, 30 + #options * 27 + 8)
        else
            optionsFrame.Size = UDim2.new(1, 0, 0, 0)
            container.Size = UDim2.new(1, -16, 0, 30)
        end
    end
    
    mainButton.MouseButton1Click:Connect(toggleDropdown)
    
    -- Initialize
    mainButton.Text = name .. ": " .. selected
    
    table.insert(self.elements, container)
    return {
        SetSelected = function(option)
            if table.find(options, option) then
                selected = option
                mainButton.Text = name .. ": " .. selected
                callback(selected)
            end
        end,
        GetSelected = function() return selected end
    }
end

function UILib:addLabel(text)
    local label = Instance.new("TextLabel", self.scroll)
    label.Name = "Label_" .. string.sub(text, 1, 10)
    label.Size = UDim2.new(1, -16, 0, 20)
    label.Text = text
    label.TextColor3 = self.Theme.Text
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.Gotham
    label.TextSize = 14
    
    table.insert(self.elements, label)
    return label
end

function UILib:setPosition(position)
    self.frame.Position = position
end

function UILib:setSize(size)
    if not self.minimized then
        self.frame.Size = size
        self.preMinimizeSize = size
    end
end

function UILib:setTheme(newTheme)
    -- Merge new theme with default theme
    for key, value in pairs(DEFAULT_THEME) do
        if newTheme[key] == nil then
            newTheme[key] = value
        end
    end
    
    self.Theme = newTheme
    -- TODO: Update all existing elements with new theme colors
end

function UILib:destroy()
    self.gui:Destroy()
    setmetatable(self, nil)
end

return UILib
